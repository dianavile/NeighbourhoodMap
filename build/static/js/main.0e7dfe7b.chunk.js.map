{"version":3,"sources":["Header.js","Locations.js","Map.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","tabIndex","google","window","Locations","state","query","_this2","this","role","ref","c","searchBox","maps","places","SearchBox","types","addListener","getPlaces","length","position","lat","geometry","location","lng","getNewLocation","type","placeholder","aria-label","venues","map","place","index","key","venue","id","onClick","selectedVenue","href","name","Component","Map","mapstyle","mapStyle","lib","defaultZoom","defaultCenter","defaultOptions","styles","zoom","center","animation","verified","Animation","BOUNCE","toggleInfoBox","InfoBox_default","options","pixelOffset","Size","closeBoxURL","boxStyle","width","visible","formattedAddress","withGoogleMap","Footer","target","rel","App","fetch","_this","then","res","json","setState","response","groups","items","console","log","catch","err","coords","toggleInfobox","venueCurrent","src_Header","src_Locations","src_Map","containerElement","style","height","mapElement","src_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e7dfe7b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n//Stateless Functional Component\nconst Header = (props) => {\n    return (\n        <header className='header' title='Buenas Migas Barcelona' tabIndex='0'>\n            <div className='header-titles'>\n                <h1 className=\"header-title\">Buenas Migas Barcelona</h1>\n                <h4 className=\"header-subtitle\">FOCACCERIA</h4>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React, {Component} from 'react'\nimport './App.css';\nconst google = window.google;\n\n/* Filter the list of locations\n* This component contains all needed to filter the locations\n*/\nclass Locations extends Component {\n\n    state = {\n        query: '',    \n    }\n\n     render() {\n        return (\n            <nav>\n                <div className='search-locations' role='application'>\n                    <input\n                        className=\"Searchbox\"\n                        ref={(c) => {\n                            if (!c) {\n                                return;\n                            }\n                            const searchBox = new google.maps.places.SearchBox(c, { types: ['geocode'] });\n                            searchBox.addListener('places_changed', ()=> {\n                                const places = searchBox.getPlaces();\n                                if (places.length > 0) {\n                                    const position = {lat: places[0].geometry.location.lat(), lng: places[0].geometry.location.lng()};\n                                    this.props.getNewLocation(position)\n                                }\n                            })\n                        }}\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        aria-label='Search for Buenas Migas lunch place in Barcelona'\n                    />\n                </div>\n                <div className=\"menu\">\n                    <ul aria-label='Lunch locations' role='menu'>\n                        {this.props.venues.length && this.props.venues.map((place, index) => (\n                            <li key={place.venue.id} \n                            tabIndex='0'\n                            role='menuitem'\n                            onClick={() => {this.props.selectedVenue(place.venue)}}>\n                            <a href='#Location1' >{place.venue.name} </a></li>\n                            )\n                        )\n                        }\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Locations;\n","import React, {Component} from 'react';\nimport './App.css';\nimport mapStyle from \"./mapStyle\";\nimport {withGoogleMap, GoogleMap, Marker} from \"react-google-maps\";\nimport InfoBox from \"react-google-maps/lib/components/addons/InfoBox\";\nconst google = window.google;\n\n\n//Map Component\nclass Map extends Component {\n\n        state = {\n            mapstyle: mapStyle,\n        }\n\n    render() {\n        return (\n            //Default attributes and starting point GoogleMap\n            <GoogleMap\n                defaultZoom={10}\n                defaultCenter={{ lat: 41.3851, lng: 2.1734}}\n                defaultOptions={{ styles: this.state.mapstyle }}\n                zoom={this.props.zoom}\n                center={{ lat: this.props.lat, lng: this.props.lng}}\n            >\n                {this.props.venues.length && this.props.venues.map((place, index) => (\n                    <Marker key={place.venue.id} position={{lat: place.venue.location.lat, lng: place.venue.location.lng}} animation={place.verified ? window.google.maps.Animation.BOUNCE : null} onClick={() => this.props.toggleInfoBox(place.venue.id)}>\n                        <div>\n                           { place.verified && \n                            <InfoBox options={{pixelOffset: new google.maps.Size(-120, -200) , closeBoxURL: '',boxStyle: {width: \"200px\"} }} visible={place.verified}>\n                                <div>\n                                    <h2>{place.venue.name}</h2>\n                                    <p>{place.venue.location.formattedAddress[0]}</p>\n                                </div>\n                            </InfoBox> }\n                        </div>\n                    </Marker>\n                    )\n                )\n                }\n            </GoogleMap>\n        );\n        }\n\n}\n\nexport default withGoogleMap(Map);\n","import React from 'react'\nimport './App.css';\n\n//Stateless Functional Component\nconst Footer = (props) => {\n    return (\n         <footer id='footer-wrapper' role='contentinfo'>          \n            <p className=\"copyright\"> 2018.Udacity-FEND.\n                Made with ❤ by \n            <a id='footer-link' \n                target='_blank' \n                rel=\"noopener noreferrer\" \n                href='https://www.linkedin.com/in/dianavile/'> Diana Vilé\n            </a>.\n            Map:\n            <a href='https://developers.google.com/maps/documentation/' \n               target=\"_blank\" \n               rel=\"noopener noreferrer\"> Google Maps.\n            </a> \n\n            Data:\n            <a href='https://developer.foursquare.com/'> Foursquare API\n            </a>\n\n            Icons:\n            <a href=\"https://www.freepik.com/\" title=\"Freepik\">Freepik </a> \n            from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com\n            </a>\n            </p>\n        </footer>\n        )    \n}\n\nexport default Footer\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport Locations from './Locations.js';\n//import * as Data from './Data.json';\nimport Map from './Map.js';\n//import mapStyle from './mapStyle.json';\nimport Footer from './Footer.js';\n\nclass App extends Component {\n  \n  state = {\n        venues: [],\n        lat: 41.3851,\n        lng: 2.1734,\n        zoom: 12,\n    }\n  \n// Foursquare API Information  \n  getPlaces =() => {\n        fetch('https://api.foursquare.com/v2/venues/explore?client_id=T24PWGNQT33GTQ1ZVJYJVUFFIOXPZTKIGYIA0WD1D2NQDVSJ&client_secret=EGPDEHMSUVQUZZXBRLAWE4FZ3OOIXVEDSWPSXDD5UXCZVDP0&v=20180323&limit=10&ll='+this.state.lat+','+this.state.lng +'&query=buenas migas')\n            .then(res => res.json())\n            .then(res => {\n                this.setState({venues: res.response.groups[0].items})\n                console.log(res)\n            })\n            .catch(function(err) {\n                // Code for handling errors\n                console.log(err)\n            });\n    }\n\n    getNewLocation = (coords) => {\n        this.setState({\n            lat: coords.lat,\n            lng: coords.lng,\n        }, this.getPlaces)\n    }\n\n    selectedVenue = (venue) => {\n        this.setState({\n            lat: venue.location.lat,\n            lng: venue.location.lng,\n            zoom: 16\n        })\n        this.toggleInfobox(venue.id\n        )\n    }\n\n    componentDidMount() {\n        this.getPlaces();\n    }\n\n    toggleInfobox = (id) => {\n        this.setState(() => ({\n            venues: this.state.venues.map(venueCurrent => {\n                venueCurrent.venue.id === id ? venueCurrent.verified = !venueCurrent.verified : venueCurrent.verified = false;\n                return venueCurrent;\n            })\n        }))\n    };  \n\n  render() {\n    return (\n      <main>\n      <div className=\"App\">\n         <Header />\n         <Locations getNewLocation={this.getNewLocation}\n                    venues={this.state.venues}\n                    selectedVenue={this.selectedVenue}/>\n        <section id='map-area' tabIndex='0'>\n         <Map venues={this.state.venues}\n                    containerElement={<div style={{height: `800px`}} />}\n                    mapElement= {<div style={{height: `100%`}} />}\n                    toggleInfoBox={this.toggleInfobox}\n                    lat={this.state.lat}\n                    lng={this.state.lng}\n                    zoom={this.state.zoom}\n          />\n        </section>\n         <Footer />\n      </div>\n      </main>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}